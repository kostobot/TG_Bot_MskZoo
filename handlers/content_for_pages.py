import os
import random
from aiogram.types import BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.utils.formatting import Bold, as_list, as_section
from keyboards.inline import *
from database.orm_requests import *


async def get_get_main_menu(full_name):
    """
    –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    :param full_name: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É
    :return:
    """
    text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {full_name} ü§ó!\n –†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å! üôÇ\n" \
        "–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É \"–ö–∞–∫–æ–µ —É –≤–∞—Å —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ\".\n" \
        "–ê –ø–æ—Ç–æ–º —É–∑–Ω–∞—Ç—å –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏ –≤–∞–∂–Ω–æ–µüòâ.\n\n" \
        "–ñ–¥—ë–º –≤–∞—Å –Ω–∞ —Ñ–∏–Ω–∏—à–µ!‚ù§Ô∏è"

    kbds = get_user_main_btns()
    image = None
    image_start_path = os.path.join(os.getcwd(), "keyboards/image_start.png")
    if os.path.exists(image_start_path):
        with open(image_start_path, "rb") as image_from_buffer:
            image = BufferedInputFile(image_from_buffer.read(),
                                      filename="image_start.png")

    return text, kbds, image


async def questions_page(session: AsyncSession, question_id, state=None):
    """
    –ú–æ–¥—É–ª—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.
    :param session:
    :param question_id: index –∏–∑ –ª–∏—Å—Ç–∞ questions_id, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑
    :param state:
    :return:
    """
    data = await state.get_data()
    questions_id = data.get('questions_id')

    if not questions_id:
        all_questions = await get_questions(session)
        if not all_questions:
            text = '–ú–æ–¥—É–ª—å —Å –≤–∏–∫—Ç–æ—Ä–∏–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –í–µ–¥—É—Ç—å—Å—è —Ä–∞–±–æ—Ç—ã –ø–æ –µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—é. üôÇ\n'
            kbds = get_not_quiz_btns()
            return text, kbds

        if all_questions.__len__() == int(os.getenv('COL_QUESTIONS')) or \
                all_questions.__len__() < int(os.getenv('COL_QUESTIONS')):
            questions = all_questions
        else:
            questions = random.sample(all_questions, int(os.getenv('COL_QUESTIONS')))

        questions_id = [q.id for q in questions]
        await state.set_data({'weights': {}, 'questions_id': questions_id})

    question = await get_question(session, questions_id[question_id])
    text = f'{question_id + 1}/{os.getenv("COL_QUESTIONS")} {question.question}'
    menu_main = None

    if question_id + 1 == int(os.getenv('COL_QUESTIONS')):
        menu_main = 'show_result'

    kbds = get_user_question_btns(question_id=question_id,
                                  question=question,
                                  menu_main=menu_main)

    return text, kbds


async def plus_points(state: FSMContext, session: AsyncSession, user_select: int, question_id: int = 0):
    """
    –ú–µ—Ç–æ–¥ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –±–∞–ª–ª—ã —Ç–µ–∫—É—â–µ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    :param state:
    :param session:
    :param user_select: –ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :param question_id: –¢–µ–∫—É—â–∏–π id –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –ë–î, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—ã–±—Ä–∞–Ω –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    :return:
    """
    data = await state.get_data()
    questions_id = data.get('questions_id')
    if questions_id:
        question = await get_question(session, questions_id[question_id - 1])
        answer = list(json.loads(question.answer).values())[user_select]
        for v in answer:
            if not v in data['weights']:
                data['weights'][v] = 1
            else:
                data['weights'][v] += 1

        await state.update_data({'weights': data['weights']})


async def show_result(state: FSMContext):
    """
    –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    :param state:
    :return:
    """
    data = await state.get_data()
    max_value, result = 0, ''
    for k, v in data['weights'].items():
        if max_value < v:
            max_value, result = v, k

    path_file, image = None, None
    text = f'–¢–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: "{result}"\n–ü–æ—Å–º–æ—Ç—Ä–∏ –∫–∞–∫–æ–π —Ö–æ—Ä–æ—à–µ–Ω—å–∫–∏–π –∑–≤–µ—Ä—ë–∫!üòä'
    dir_foto = os.path.join(os.getcwd(), f"modul_quiz/foto")
    for _f in os.listdir(dir_foto):
        if _f.lower().strip().__contains__(result.lower().strip()):
            path_file = os.path.join(dir_foto, _f)
            break
    if path_file:
        with open(path_file, "rb") as image_from_buffer:
            image = BufferedInputFile(image_from_buffer.read(), filename=f"{result}")

    kbds = get_result_btns(result_quiz=text)

    return text, kbds, image


async def program():
    """
    –û –ø—Ä–æ–≥—Ä–∞–º–µ –æ–ø–µ–∫–∏
    :return:
    """
    text = as_list(
        as_section(Bold("–í–æ–∑—å–º–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ–¥ –æ–ø–µ–∫—É!")),
        as_section("–û–ø–µ–∫–∞ –Ω–∞–¥ –∂–∏–≤–æ—Ç–Ω—ã–º –∏–∑ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è "
                   f"–ó–µ–º–ª–∏ –∏, –∫–æ–Ω–µ—á–Ω–æ,", (Bold("—ç—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å –∂–∏–≤–æ—Ç–Ω—ã–º –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞!")),
                   "\n–ë–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞–º –º—ã –º–æ–∂–µ–º —É–ª—É—á—à–∏—Ç—å —É—Å–ª–æ–≤–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–∞—à–∏—Ö –æ–±–∏—Ç–∞—Ç–µ–ª–µ–π. ü¶ä"),
        as_section("–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∂–∏–∑–Ω–∏ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞, –ø–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ –ø—Ä–∏—á–∞—Å—Ç–Ω–æ—Å—Ç—å –∫ –¥–µ–ª—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏—Ä–æ–¥—ã. üå≥",
                   "–°—Ç–∞–Ω—å—Ç–µ –æ–ø–µ–∫—É–Ω–æ–º –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –ª—é–±–æ–≤—å—é –∏ –∑–∞–±–æ—Ç–æ–π —Å–æ —Å–≤–æ–∏–º –ø–æ–¥–æ–ø–µ—á–Ω—ã–º.\n"),
        as_section(f"–û–ø–µ–∫–∞—Ç—å ‚Äì –∑–Ω–∞—á–∏—Ç –ø–æ–º–æ–≥–∞—Ç—å –ª—é–±–∏–º—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º ‚ù§Ô∏è."))

    kbds = get_program_btns()

    return text, kbds


async def contacts():
    """
    –î–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
    :return:
    """
    text = f'–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫—É–Ω—Å—Ç–≤–∞, ' \
           '–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º: \n\n' \
           f'  üë§  {os.getenv("MANAGER_NAME")}\n' \
           f'  üì©  E-mail: {os.getenv("MANAGER_EMAIL")}\n' \
           f'  ‚òé  –¢–µ–ª–µ—Ñ–æ–Ω: {os.getenv("MANAGER_PHONE")}'

    kbds = get_contacts_btns()
    return text, kbds
