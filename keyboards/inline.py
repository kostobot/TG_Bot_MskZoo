import json
from typing import Optional
from pydantic import Field
from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.models import QuestionsORM


class MenuCallBack(CallbackData, prefix="menu"):
    menu_name: str = 'start_page'
    user_select: Optional[int] = Field(default=0)
    question_id: Optional[int] = 0


def get_user_main_btns():
    """
    –≠—Ç–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∞–º–æ–π —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    :return:
    """
    keyboard = InlineKeyboardBuilder()
    btns = {
        "–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É ü¶Å": "quiz",
        "–£–∑–Ω–∞—Ç—å —Å—Ä–∞–∑—É üê•": "program"
    }
    for text, menu_name in btns.items():
        keyboard.add(InlineKeyboardButton(text=text,
                                          callback_data=MenuCallBack(menu_name=menu_name).pack()))

    return keyboard.adjust(1).as_markup()


def get_not_quiz_btns():
    """
    –ö–Ω–æ–ø–∫–∏, –∫–æ–≥–¥–∞ –±–∞–∑–∞ –±—ã–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –∏ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
    –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (–º–æ–¥—É–ª—å —Å –≤–∏–∫—Ç–æ—Ä–∏–Ω–æ–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    :return:
    """
    keyboard = InlineKeyboardBuilder()
    btns = {
        "–í –Ω–∞—á–∞–ª–æ üôÇ": "restart",
        "–£–∑–Ω–∞—Ç—å —Å—Ä–∞–∑—É üê•": "program"
    }
    for text, menu_name in btns.items():
        keyboard.add(InlineKeyboardButton(text=text,
                                          callback_data=MenuCallBack(menu_name=menu_name).pack()))

    return keyboard.adjust(1).as_markup()


def get_user_question_btns(question_id: int, question: QuestionsORM, menu_main: Optional[str] = None):
    """
    –ö–Ω–æ–ø–∫–∏ - –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å (–¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã)
    :param question: –≤–æ–ø—Ä–æ—Å –∏–∑ –ë–î, –∫–æ—Ç–æ—Ä—ã –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–µ–π—á–∞—Å
    :param question_id: –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Å–ø–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.
    –≠—Ç–æ index –∏–∑ –ª–∏—Å—Ç–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º –ª–µ–∂–∞—Ç id —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    :param menu_main: –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ü–∞—Ä–∞–º–µ—Ç—Ä, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞ –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏
    :return:
    """
    keyboard = InlineKeyboardBuilder()
    for i, k in enumerate(list(json.loads(question.answer).keys())):
        keyboard.add(InlineKeyboardButton(text=k,
                                          callback_data=MenuCallBack(user_select=i,
                                                                     menu_name=menu_main if menu_main else 'quiz',
                                                                     question_id=question_id + 1).pack()))

    return keyboard.adjust(1).as_markup()


def get_result_btns(result_quiz):
    """
    –ö–Ω–æ–ø–∫–∏ - –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    :param result_quiz: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    :return:
    """
    keyboard = InlineKeyboardBuilder()
    btns = {
        "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑? üôÇ": "quiz",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–ø–µ–∫–∏ ü¶ã": "program",
        "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤": "feedback",
        "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º": "send_result",
        "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º ‚òé": "manager_contact"
    }
    for text, menu_name in btns.items():
        if menu_name == 'send_result':
            keyboard.add(InlineKeyboardButton(text=text,
                                              switch_inline_query=f'\n{result_quiz}'))
        else:
            keyboard.add(InlineKeyboardButton(text=text,
                                              callback_data=MenuCallBack(menu_name=menu_name).pack()))
    return keyboard.adjust(1).as_markup()


def get_program_btns():
    """
    –ö–Ω–æ–ø–∫–∏ - –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–µ–∫–∏
    :return:
    """
    keyboard = InlineKeyboardBuilder()
    btns = {
        "–í –Ω–∞—á–∞–ª–æ üôÇ": "restart",
        "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤": "feedback",
        "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º ‚òéÔ∏è": "manager_contact",
    }
    for text, menu_name in btns.items():
        keyboard.add(InlineKeyboardButton(text=text,
                                          callback_data=MenuCallBack(menu_name=menu_name).pack()))

    return keyboard.adjust(1).as_markup()


def get_contacts_btns():
    """
    –ö–Ω–æ–ø–∫–∏ - –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∂–∞–ª "–°–≤—è–∑—å —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º"
    :return:
    """
    keyboard = InlineKeyboardBuilder()
    btns = {
        "–í –Ω–∞—á–∞–ª–æ üôÇ": "restart",
        "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤": "feedback",
    }
    for text, menu_name in btns.items():
        keyboard.add(InlineKeyboardButton(text=text,
                                          callback_data=MenuCallBack(menu_name=menu_name).pack()))

    return keyboard.adjust(1).as_markup()
